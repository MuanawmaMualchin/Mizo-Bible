/*!
    fileSystask -- Javascript file System task
    Version 1.0.2
    https://khensolomonlethil.github.io/laisiangtho/fileSystask
    (c) 2013-2015
*/
(function(o) {
    "use strict";
    window.requestfileSystask;
    window.resolvefileSystask;
    window[o] = function(Setting, Init) {
        var fileSystask = this, OS = {};
        var Task = {
            base: {
                Chrome: {
                    RequestQuota: 1073741824
                },
                Cordova: {
                    RequestQuota: 0
                },
                Other: {
                    RequestQuota: 0
                }
            },
            message: {
                RequestFileSystem: "requestFileSystem API/Method supported!",
                NoRequestFileSystem: "No requestFileSystem API/Method!",
                PleaseSeeStatus: "Please see {status}!"
            },
            Callback: {
                before: function() {},
                progress: function() {},
                done: function() {},
                fail: function() {},
                success: function() {}
            },
            Arguments: function(o, arg) {
                for (var i in arg) {
                    if (arg.hasOwnProperty(i) && i == 0) {
                        o = Object.assign({}, this.Callback, arg[i]);
                    } else if (arg.hasOwnProperty(i)) {
                        o = Object.assign({}, this.Callback, o, arg[i]);
                    }
                }
                return o;
            },
            extension: {
                mp3: {
                    ContentType: "audio/mp3"
                },
                mp4: {
                    ContentType: "audio/mp4"
                },
                txt: {
                    ContentType: "text/plain"
                },
                css: {
                    ContentType: "text/css"
                },
                avi: {
                    ContentType: "video/x-msvideo"
                },
                html: {
                    ContentType: "text/html"
                },
                mxml: {
                    ContentType: "application/xv+xml"
                },
                rss: {
                    ContentType: "application/rss+xml"
                },
                xml: {
                    ContentType: "application/xml"
                },
                js: {
                    ContentType: "application/javascript"
                },
                json: {
                    ContentType: "application/json"
                },
                xhtml: {
                    ContentType: "application/xhtml+xml"
                },
                pdf: {
                    ContentType: "application/pdf"
                },
                jpg: {
                    ContentType: "image/jpeg"
                },
                jpeg: {
                    ContentType: "image/jpeg"
                },
                png: {
                    ContentType: "image/png"
                },
                other: {
                    ContentType: "text/plain",
                    Charset: "UTF-8",
                    fileName: "Uknown",
                    fileExtension: ""
                }
            },
            Assigns: function(i) {
                var defaultName = Object.keys(this.base).pop();
                if (i) {
                    if (typeof i === "object") {
                        if (i.Base && this.base.hasOwnProperty(i.Base)) {
                            Object.assign(OS, this.base[i.Base], i);
                        } else {
                            Object.assign(OS, this.base[defaultName], i, {
                                Base: defaultName
                            });
                        }
                    } else if (typeof i === "string" && this.base[i]) {
                        Object.assign(OS, this.base[i], {
                            Base: i
                        });
                    } else {
                        Object.assign(OS, this.base[defaultName], {
                            Base: defaultName
                        });
                    }
                } else {
                    Object.assign(OS, this.base[defaultName], {
                        Base: defaultName
                    });
                }
                new Promise(function(resolve, reject) {
                    Task.Initiate[OS.Base](function(e) {
                        OS.Ok = true;
                        OS.message = Task.message.RequestFileSystem;
                        resolve(e);
                    }, function(e) {
                        OS.Ok = false;
                        if (typeof e === "string") {
                            OS.message = e;
                        } else if (e.message) {
                            OS.message = e.message;
                            if (e.name) OS.name = e.name;
                            if (e.code) OS.code = e.code;
                        } else {
                            OS.status = e;
                            OS.message = Task.message.PleaseSeeStatus;
                        }
                        reject(OS);
                    });
                }).then(function(e) {
                    f1(Init.success, e);
                }, function(e) {
                    f1(Init.fail, e);
                }).then(function() {
                    fileSystask.support = OS.Ok;
                    f1(Init.done, OS);
                });
            },
            Initiate: {
                Chrome: function(done, error) {
                    try {
                        navigator.webkitPersistentStorage.requestQuota(OS.RequestQuota, function(grantedBytes) {
                            OS.ResponseQuota = grantedBytes;
                            window.requestfileSystask = window.webkitRequestFileSystem;
                            window.resolvefileSystask = window.webkitResolveLocalFileSystemURL;
                            window.requestfileSystask(OS.Permission > 0 ? window.PERSISTENT : window.TEMPORARY, grantedBytes, function(fileSystem) {
                                OS.Root = fileSystem.root.toURL();
                                done(fileSystem);
                            }, function(e) {
                                error(e);
                            });
                        }, function(e) {
                            error(e);
                        });
                    } catch (e) {
                        error(e);
                    } finally {}
                },
                Cordova: function(done, error) {
                    try {
                        window.requestfileSystask = window.requestFileSystem || window.webkitRequestFileSystem;
                        window.resolvefileSystask = window.resolveLocalFileSystemURL || window.webkitResolveLocalFileSystemURL;
                        if (window.requestfileSystask) {
                            if (window.LocalFileSystem) {
                                window.PERSISTENT = window.LocalFileSystem.PERSISTENT;
                                window.TEMPORARY = window.LocalFileSystem.TEMPORARY;
                            } else if (window.cordova && location.protocol === "file:") {}
                            window.requestfileSystask(OS.Permission > 0 ? window.PERSISTENT : window.TEMPORARY, OS.RequestQuota, function(fileSystem) {
                                OS.Root = fileSystem.root.toURL();
                                done(fileSystem);
                            }, function(e) {
                                error(e);
                            });
                        } else {
                            error(Task.message.NoRequestFileSystem);
                        }
                    } catch (e) {
                        error(e);
                    } finally {}
                },
                Other: function(done, error) {
                    try {
                        window.requestfileSystask = window.requestFileSystem || window.webkitRequestFileSystem;
                        window.resolvefileSystask = window.resolveLocalFileSystemURL || window.webkitResolveLocalFileSystemURL;
                        window.requestfileSystask(OS.Permission > 0 ? window.PERSISTENT : window.TEMPORARY, OS.RequestQuota, function(fileSystem) {
                            OS.Root = fileSystem.root.toURL();
                            done(fileSystem);
                        }, function(e) {
                            error(e);
                        });
                    } catch (e) {
                        if (navigator.webkitPersistentStorage) {
                            this.Chrome(done, error);
                        } else {
                            error(e);
                        }
                    } finally {}
                }
            },
            Request: {
                Chrome: function(done, error) {
                    try {
                        navigator.webkitPersistentStorage.requestQuota(OS.RequestQuota, function(grantedBytes) {
                            OS.ResponseQuota = grantedBytes;
                            window.requestfileSystask(OS.Permission > 0 ? window.PERSISTENT : window.TEMPORARY, grantedBytes, function(fileSystem) {
                                OS.Root = fileSystem.root.toURL();
                                done(fileSystem);
                            }, function(e) {
                                error(e);
                            });
                        }, function(e) {
                            error(e);
                        });
                    } catch (e) {
                        error(e);
                    } finally {
                        return window.requestfileSystask;
                    }
                },
                Cordova: function(done, error) {
                    try {
                        if (window.requestfileSystask) {
                            window.requestfileSystask(OS.Permission > 0 ? window.PERSISTENT : window.TEMPORARY, OS.RequestQuota, function(fileSystem) {
                                done(fileSystem);
                            }, function(e) {
                                error(e);
                            });
                        } else {
                            error(Task.message.NoRequestFileSystem);
                        }
                    } catch (e) {
                        error(e);
                    } finally {
                        return window.requestfileSystask;
                    }
                },
                Other: function(done, error) {
                    try {
                        if (window.requestfileSystask) {
                            window.requestfileSystask(OS.Permission > 0 ? window.PERSISTENT : window.TEMPORARY, OS.RequestQuota, function(fileSystem) {
                                done(fileSystem);
                            }, function(e) {
                                error(e);
                            });
                        } else {
                            error(Task.message.NoRequestFileSystem);
                        }
                    } catch (e) {
                        error(e);
                    } finally {
                        return window.requestfileSystask;
                    }
                }
            },
            Resolve: {
                Chrome: function(url, done, error) {
                    try {
                        navigator.webkitPersistentStorage.requestQuota(OS.RequestQuota, function(grantedBytes) {
                            OS.ResponseQuota = grantedBytes;
                            window.resolvefileSystask(url, done, error);
                        }, function(e) {
                            error(e);
                        });
                    } catch (e) {
                        error(e);
                    } finally {
                        return window.resolvefileSystask;
                    }
                },
                Cordova: function(url, done, error) {
                    try {
                        window.resolvefileSystask(url, done, error);
                    } catch (e) {
                        error(e);
                    } finally {
                        return window.resolvefileSystask;
                    }
                },
                Other: function(url, done, error) {
                    try {
                        window.resolvefileSystask(url, done, error);
                    } catch (e) {
                        error(e);
                    } finally {
                        return window.resolvefileSystask;
                    }
                }
            }
        };
        Task.Assigns(Setting);
        this.setting = function(arg) {
            return Task.Assigns(arg);
        };
        this.permission = function() {};
        this.request = function(success, error) {
            if (OS.Ok === false) {
                return f1(error, OS);
            }
            return Task.Request[OS.Base](function(e) {
                return f1(success, e);
            }, function(e) {
                if (typeof e !== "string") {
                    if (e.message) {
                        e = e.message;
                    }
                }
                return f1(error, e);
            });
        };
        this.resolve = function(file, success, error) {
            if (OS.Ok === false) {
                return f1(error, OS);
            }
            return Task.Resolve[OS.Base](file, function(e) {
                return f1(success, e);
            }, function(e) {
                if (typeof e !== "string") {
                    if (e.message) {
                        e = e.message;
                    }
                }
                return f1(error, e);
            });
        };
        this.get = function(Obj) {
            Obj = Task.Arguments(Obj, arguments);
            return new Promise(function(resolve, reject) {
                fileSystask.request(function(fs, status) {
                    fs.root.getFile(Obj.fileUrlLocal, Obj.fileOption, function(fileEntry) {
                        if (Obj.fileOption.create === true && Obj.fileContent && Obj.fileContentType) {
                            fileWriter(fileEntry, Obj, function(isFileWritten, fileWriterMsg) {
                                if (isFileWritten) {
                                    resolve(fileWriterMsg);
                                } else {
                                    reject(fileWriterMsg);
                                }
                            });
                        } else {
                            fileReader(fileEntry, Obj, function(isFileRead, fileReaderMsg) {
                                if (isFileRead) {
                                    resolve(fileReaderMsg);
                                } else {
                                    reject(fileReaderMsg);
                                }
                            });
                        }
                    }, function(e) {
                        if (typeof Obj.fileOption == "object" && Obj.fileOption.create === true) {
                            var isBecauseDir = dirCheck(Obj.fileUrlLocal);
                            if (isBecauseDir) {
                                dirCreator(fs.root, isBecauseDir, function(isDirCreated, dirCreatorMsg) {
                                    if (isDirCreated) {
                                        fileCreator(fs.root, Obj, function(isFileCreated, fileCreatorMsg) {
                                            if (isFileCreated) {
                                                resolve(fileCreatorMsg);
                                            } else {
                                                reject(fileCreatorMsg);
                                            }
                                        });
                                    } else {
                                        reject(hasMsg);
                                    }
                                });
                            } else {
                                reject(e);
                            }
                        } else {
                            if (Obj.fileNotFound) {
                                resolve(e);
                            } else {
                                reject(e);
                            }
                        }
                    });
                }, function(e) {
                    reject(e);
                });
            }).then(function(e) {
                Obj.success(e);
                return e;
            }, function(e) {
                Obj.fail(e);
                return e;
            }).then(function(e) {
                Obj.done(e);
                return e;
            });
        };
        function fileCreator(fileSystemRoot, Obj, callback) {
            fileSystemRoot.getFile(Obj.fileUrlLocal, Obj.fileOption, function(fileEntry) {
                if (Obj.fileContent && Obj.fileContentType) {
                    fileWriter(fileEntry, Obj, function(isFileWritten, fileWriterMsg) {
                        callback(isFileWritten, fileWriterMsg);
                    });
                } else {
                    fileReader(fileEntry, Obj, function(isFileRead, fileReaderMsg) {
                        callback(isFileRead, fileReaderMsg);
                    });
                }
            }, function(e) {
                callback(false, e);
            });
        }
        function fileReader(fileEntry, Obj, callback) {
            fileEntry.file(function(file) {
                if (Obj.fileReadAs) {
                    var reader = new FileReader();
                    reader.onloadend = function(e) {
                        callback(true, this.result);
                    };
                    if (Obj.fileReadAs === true) {
                        Obj.fileReadAs = "readAsText";
                    }
                    reader[Obj.fileReadAs](file);
                } else {
                    callback(true, fileEntry);
                }
            }, function(file) {
                callback(false, file);
            });
        }
        function fileWriter(fileEntry, Obj, callback) {
            fileEntry.createWriter(function(writer) {
                writer.onwriteend = function(e) {
                    this.onwriteend = null;
                    this.truncate(this.position);
                    callback(true, Obj.fileContent);
                };
                writer.onerror = function() {
                    callback(false, this);
                };
                writer.write(new Blob([ Obj.fileContent ], {
                    type: Obj.fileType
                }));
            }, function(writer) {
                callback(false, writer);
            });
        }
        function dirCreator(fileSystemRoot, folders, callback) {
            if (folders[0] == "." || folders[0] == "") {
                folders = folders.slice(1);
            }
            fileSystemRoot.getDirectory(folders[0], {
                create: true
            }, function(dirEntry) {
                if (folders.length) {
                    dirCreator(dirEntry, folders.slice(1), callback);
                } else {
                    callback(true);
                }
            }, function(e) {
                callback(false, e);
            });
        }
        function dirCheck(dir) {
            var dirList = dir.split("/").slice(0, -1);
            if (dirList.length >= 1) {
                return dirList;
            } else {
                return false;
            }
        }
        this.remove = function(Obj) {
            Obj = Task.Arguments(Obj, arguments);
            return new Promise(function(resolve, reject) {
                fileSystask.request(function(fs, status) {
                    fs.root.getFile(Obj.fileUrlLocal, Obj.fileOption, function(fileEntry) {
                        fileEntry.remove(function(e) {
                            resolve(fileEntry);
                        }, function(e) {
                            reject(e);
                        });
                    }, function(e) {
                        if (Obj.fileNotFound) {
                            resolve(e);
                        } else {
                            reject(e);
                        }
                    });
                }, function(e) {
                    reject(e);
                });
            }).then(function(e) {
                Obj.success(e);
                return e;
            }, function(e) {
                Obj.fail(e);
                return e;
            }).then(function(e) {
                Obj.done(e);
                return e;
            });
        };
        this.download = function(Obj) {
            Obj = Object.assign({}, Task.Callback, Obj);
            return new Promise(function(resolve, reject) {
                var xmlHttp = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
                var Percentage = 0;
                xmlHttp.addEventListener("progress", function(e) {
                    Percentage++;
                    if (e.lengthComputable) {
                        Percentage = Math.floor(e.loaded / e.total * 100);
                        Obj.progress(Percentage);
                    } else if (xmlHttp.readyState == XMLHttpRequest.DONE) {
                        Obj.progress(100);
                    } else if (xmlHttp.status != 200) {
                        Obj.progress(Math.floor(Percentage / 7 * 100));
                        Percentage++;
                    }
                }, false);
                xmlHttp.addEventListener("load", function(e) {
                    var fileUrl = Obj.fileUrl;
                    var fileName = fileUrl.replace(/[\#\?].*$/, "").substring(fileUrl.lastIndexOf("/") + 1);
                    var fileUrlLocal = Obj.fileUrlLocal ? Obj.fileUrlLocal : fileName;
                    var fileExtension = fileName.split(".").pop();
                    var fileCharset, fileContentType;
                    if (e.target.responseXML) {
                        fileCharset = e.target.responseXML.charset;
                        fileContentType = e.target.responseXML.contentType;
                    } else {
                        fileCharset = "UTF-8";
                        if (Task.extension[fileExtension]) {
                            fileContentType = Task.extension[fileExtension].ContentType;
                        }
                    }
                    Obj.done(e);
                    if (xmlHttp.status == 200) {
                        resolve({
                            fileName: fileName,
                            fileOption: {
                                create: true,
                                exclusive: true
                            },
                            fileExtension: fileExtension,
                            fileUrl: fileUrl,
                            fileCharset: fileCharset,
                            fileContentType: fileContentType,
                            fileSize: e.total,
                            fileUrlLocal: fileUrlLocal,
                            fileContent: e.target.responseText,
                            responseXML: e.target.responseXML,
                            responseURL: e.target.responseURL
                        });
                    } else if (xmlHttp.statusText) {
                        reject({
                            message: xmlHttp.statusText + ": " + fileUrl,
                            code: xmlHttp.status
                        });
                    } else if (xmlHttp.status) {
                        reject({
                            message: "Error",
                            code: xmlHttp.status
                        });
                    } else {
                        reject({
                            message: "Unknown Error",
                            code: 0
                        });
                    }
                }, false);
                xmlHttp.addEventListener("error", function(e) {
                    reject(e);
                }, false);
                xmlHttp.addEventListener("abort", function(e) {
                    reject(e);
                }, false);
                if (Obj.fileCache) {
                    Obj.fileUrlRequest = Obj.fileUrl + (Obj.fileUrl.indexOf("?") > 0 ? "&" : "?") + "_=" + new Date().getTime();
                } else {
                    Obj.fileUrlRequest = Obj.fileUrl;
                }
                xmlHttp.open(Obj.Method ? Obj.Method : "GET", Obj.fileUrlRequest, true);
                Obj.before(xmlHttp);
                xmlHttp.send();
            }).then(function(e) {
                Obj.success(e);
                return e;
            }, function(e) {
                Obj.fail(e);
                return e;
            });
        };
        this.save = function(Obj) {
            Obj = Object.assign({}, Task.Callback, Obj);
            return new Promise(function(resolve, reject) {
                fileSystask.request(function(fs, status) {
                    try {
                        if (typeof Obj !== "object" || !Obj.fileName) {
                            return reject(Obj);
                        }
                        Obj.fileUrlLocal = Obj.fileUrlLocal ? Obj.fileUrlLocal : Obj.fileName;
                        fs.root.getFile(Obj.fileUrlLocal, Obj.fileOption, function(fileEntry) {
                            fileEntry.createWriter(function(writer) {
                                writer.onwriteend = function() {
                                    this.onwriteend = null;
                                    this.truncate(this.position);
                                    Obj.filefoldersCreatedFinal = true;
                                    resolve(fileEntry);
                                };
                                writer.onerror = function(e) {
                                    reject(e.message ? e : {
                                        message: e
                                    });
                                };
                                if (!Obj.fileContentType) {
                                    if (Task.extension[Obj.fileExtension]) {
                                        Obj.fileContentType = Task.extension[Obj.fileExtension].ContentType;
                                    } else {
                                        Obj.fileContentType = Task.extension.other.ContentType;
                                    }
                                }
                                writer.write(new Blob([ Obj.fileContent ], {
                                    type: Obj.fileContentType
                                }));
                            });
                        }, function(e) {
                            if (Obj.filefoldersCreated) {
                                if (typeof Obj === "object") {
                                    Obj.fileStatus = e;
                                } else {
                                    Obj = e;
                                }
                                reject(Obj);
                            } else {
                                Obj.filefolders = Obj.fileUrlLocal.split("/").slice(0, -1);
                                if (Obj.filefolders.length >= 1) {
                                    Obj.filefoldersCreated = true;
                                    function ObjCreateDir(rootDirEntry, folders) {
                                        if (folders[0] == "." || folders[0] == "") {
                                            folders = folders.slice(1);
                                        }
                                        rootDirEntry.getDirectory(folders[0], {
                                            create: true
                                        }, function(dirEntry) {
                                            if (folders.length) {
                                                ObjCreateDir(dirEntry, folders.slice(1));
                                            } else {
                                                resolve(fileSystask.save(Obj));
                                            }
                                        }, function(e) {
                                            if (typeof Obj === "object") {
                                                Obj.fileStatus = e;
                                            } else {
                                                Obj = e;
                                            }
                                            reject(Obj);
                                        });
                                    }
                                    ObjCreateDir(fs.root, Obj.filefolders);
                                } else {
                                    if (typeof Obj === "object") {
                                        Obj.fileStatus = e;
                                    } else {
                                        Obj = e;
                                    }
                                    reject(Obj);
                                }
                            }
                        });
                    } catch (e) {
                        reject(e.message ? e.message : {
                            message: e
                        });
                    } finally {
                        if (Obj.filefoldersCreated) {
                            if (Obj.filefoldersCreatedFinal) {
                                Obj.done(Obj);
                            }
                        } else {
                            Obj.done(Obj);
                        }
                    }
                }, function(e) {
                    Obj.done(e);
                    reject(e.message ? e : {
                        message: e
                    });
                });
            }).then(function(e) {
                if (Obj.filefoldersCreated) {
                    if (Obj.filefoldersCreatedFinal) {
                        Obj.success(e);
                    }
                } else {
                    Obj.success(e);
                }
                return e;
            }, function(e) {
                if (Obj.filefoldersCreated) {
                    if (Obj.filefoldersCreatedFinal) {
                        Obj.fail(e);
                    }
                } else {
                    Obj.fail(e);
                }
                return e;
            });
        };
        function f1(n, e) {
            if (typeof n === "function") {
                return n(e);
            } else {
                return e;
            }
        }
    };
})("fileSystask");