def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// def platformName
//   if (project.hasProperty("target-platform")) {
//       platformName = project.getProperty("target-platform")
//       if (platformName == 'android-arm64') {
//         flutterVersionCode = flutterVersionCode.toInteger() + 1
//       }
//   } else {
//       platformName = 'what'
//   }

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// Production
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.laisiangtho.bible"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        // setProperty("archivesBaseName", "$versionCode.$platformName")
        // ndk.abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64'
        // ndk {
        //     abiFilters "armeabi", "x86", "armeabi-v7a"
        // }
        // multiDexEnabled true
        // testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            shrinkResources true
            signingConfig signingConfigs.release
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            dependencies {
                implementation 'com.android.support:support-fragment:28.0.0'
            }
            // debuggable false
            // jniDebuggable false
            // renderscriptDebuggable false
            zipAlignEnabled true
        }
    }
    // splits {
    //   // Configures multiple APKs based on ABI.
    //   abi {
    //     // Enables building multiple APKs per ABI.
    //     enable true
    //     // By default all ABIs are included, so use reset() and include to specify that we only
    //     // want APKs for x86 and x86_64.
    //     // Resets the list of ABIs that Gradle should create APKs for to none.
    //     reset()
    //     // Specifies a list of ABIs that Gradle should create APKs for.
    //     include  "armeabi-v7a", "arm64-v8a"
    //     // Specifies that we do not want to also generate a universal APK that includes all ABIs.
    //     universalApk false
    //   }
    // }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    // androidTestImplementation 'com.android.support.test:runner:1.0.2'
    // androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
